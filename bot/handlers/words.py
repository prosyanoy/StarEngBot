import logging
from typing import Optional

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.formatting import as_list, Text, Bold
from spellchecker import SpellChecker

from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import joinedload

from bot.models import User, Word, Collection, Translation, AddedWord
from pydantic import BaseModel
from bot.ai import TranslationModel, Translations, get_gpt_translations


router = Router()

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
class AddWordStates(StatesGroup):
    waiting_for_new_word = State()
    waiting_for_corrected_choice = State()
    waiting_for_translation_choice = State()
    waiting_for_collection_choice = State()


async def check_collections(callback: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    if db_session is None:
        await callback.message.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        await state.clear()
        return
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ —Å–æ–∑–¥–∞—ë–º, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
    result = await db_session.execute(select(User).where(User.telegram_id == callback.from_user.id))
    user = result.scalars().first()
    if not user:
        user = User(telegram_id=callback.from_user.id)
        db_session.add(user)
        await db_session.flush()
    result = await db_session.execute(select(Collection).where(Collection.user_id == user.id))
    collections = result.scalars().all()
    if not collections:
        await callback.message.answer(
            "–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–π. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /create_collection."
        )
        await state.clear()
        return None
    return collections

async def fetch_translations_from_db(
    word: str,
    session: AsyncSession
) -> Optional[Translations]:

    result = await session.execute(
        select(Translation)
        .join(Word)                       # INNER JOIN words
        .where(Word.english_word == word)
        .options(joinedload(Translation.word))   # optional ‚Äì eager-load
    )

    translations = result.scalars().all()        # list[Translation]

    if not translations:
        return None

    models = [
        TranslationModel(
            transcription=t.transcription or "",
            translation=t.translation,
            example_en=t.example_en or "",
            example_ru=t.example_ru or "",
        )
        for t in translations
    ]

    return Translations(word=word, translations=models)

# ------------ add word -----------------------------------------------
@router.message(AddWordStates.waiting_for_new_word, lambda m: m.text and not m.text.startswith("/"))
async def auto_add_word(message: Message,
                        state: FSMContext,
                        db_session: AsyncSession):
    english_word = message.text.strip()
    await process_english_word(
        english_word,
        state,
        db_session,
        message=message
    )

# ------------------------------------------------------------------
async def process_english_word(
    english_word: str,
    state: FSMContext,
    db_session: AsyncSession,
    message: Optional[Message] = None,
    callback: Optional[CallbackQuery] = None
):
    english_word = english_word.lower()
    if callback:
        message = callback.message
    else:
        spell = SpellChecker()
        if bool(spell.unknown([english_word])):
            kb = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text=c, callback_data=f"cr_{c}")]
                                 for c in spell.candidates(english_word)]
            )
            if not kb.inline_keyboard:
                await message.answer("–£–∫–∞–∑–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. Try again üôÇ")
                return
            await message.answer(
                "–£–∫–∞–∑–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:",
                reply_markup=kb
            )
            await state.set_state(AddWordStates.waiting_for_corrected_choice)
            return

    # 1. –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –±–∞–∑–µ
    translations_data = await fetch_translations_from_db(english_word, db_session)

    # 2. –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º GPT
    if translations_data is None:
        translations_data = await get_gpt_translations(english_word)
        if translations_data is None:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
            return

    # 3. —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM
    await state.update_data(translations=translations_data)

    # 4. –≤—ã–≤–æ–¥–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    content_lines = [Text(f"–ü–µ—Ä–µ–≤–æ–¥—ã —Å–ª–æ–≤–∞ {translations_data.word}"), Text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω:\n")]
    for idx, item in enumerate(translations_data.translations):
        content_lines.append(
            Text(f"{idx + 1}. ", Bold(item.translation), f" /{item.transcription}/\n", Bold(item.example_en), "\n",
                 item.example_ru, "\n"))
        kb.inline_keyboard.append([
            InlineKeyboardButton(text=item.translation, callback_data=f"tr_{idx}")
        ])

    await message.answer(**as_list(*content_lines).as_kwargs(), reply_markup=kb)
    await state.set_state(AddWordStates.waiting_for_translation_choice)

@router.callback_query(AddWordStates.waiting_for_corrected_choice, F.data.startswith("cr_"))
async def process_corrected_choice(callback: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    english_word = callback.data.split("_")[1]
    await process_english_word(english_word, state, db_session, callback=callback)

@router.callback_query(AddWordStates.waiting_for_translation_choice, F.data.startswith("tr_"))
async def process_translation_choice(callback: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    await callback.answer()
    idx = int(callback.data.split("_")[1])
    state_data = await state.get_data()
    tr: Translations = state_data.get("translations")
    word: str = tr.word
    translations = tr.translations
    if idx < 0 or idx >= len(translations):
        await callback.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    chosen_translation = translations[idx]
    await state.update_data(chosen_translation=chosen_translation)
    collections = await check_collections(callback, state, db_session)
    if not collections:
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for col in collections:
        kb.inline_keyboard.append([
            InlineKeyboardButton(text=col.name, callback_data=f"col_{col.id}")
        ])
    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä–µ–≤–æ–¥: {chosen_translation.translation}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é:",
        reply_markup=kb
    )
    await state.set_state(AddWordStates.waiting_for_collection_choice)

@router.callback_query(AddWordStates.waiting_for_collection_choice, F.data.startswith("col_"))
async def process_collection_choice(
    callback: CallbackQuery,
    state: FSMContext,
    db_session: AsyncSession         # –±–µ—Ä—ë–º –∏–∑ middleware
):
    await callback.answer()
    col_id = int(callback.data.split("_")[1])

    state_data        = await state.get_data()
    tr: Translations  = state_data["translations"]          # –æ–±—ä–µ–∫—Ç Translations
    chosen            = state_data["chosen_translation"]    # dict –æ–¥–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞

    # ---------- 1. –±–µ—Ä—ë–º (–∏–ª–∏ —Å–æ–∑–¥–∞—ë–º) Word ----------
    result    = await db_session.execute(
        select(Word).where(Word.english_word == tr.word)
    )
    word_obj  = result.scalars().first()
    if not word_obj:
        word_obj = Word(english_word=tr.word)
        db_session.add(word_obj)
        await db_session.flush()

    # ---------- 2. –∑–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å–ª–æ–≤–∞ ----------
    result = await db_session.execute(
        select(Translation).where(Translation.word_id == word_obj.id)
    )
    existing = {t.translation: t for t in result.scalars().all()}     # dict –ø–æ —Ç–µ–∫—Å—Ç—É –ø–µ—Ä–µ–≤–æ–¥–∞

    # ---------- 3. –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –ø–µ—Ä–µ–≤–æ–¥—É –∏–∑ GPT (–∏–ª–∏ –∏–∑ –ë–î) ----------
    added_translation_objs: list[Translation] = []
    for t in tr.translations:
        if t.translation in existing:
            # –ø–µ—Ä–µ–≤–æ–¥ —É–∂–µ –µ—Å—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç
            tr_obj = existing[t.translation]
        else:
            # –Ω–æ–≤–æ–≥–æ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É translations
            tr_obj = Translation(
                word_id      = word_obj.id,
                translation  = t.translation,
                transcription= t.transcription,
                example_en   = t.example_en,
                example_ru   = t.example_ru
            )
            db_session.add(tr_obj)
            await db_session.flush()
        added_translation_objs.append(tr_obj)

    # ---------- 4. –ø–æ–ª—É—á–∞–µ–º (–∏–ª–∏ —Å–æ–∑–¥–∞—ë–º) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ----------
    result = await db_session.execute(
        select(User).where(User.telegram_id == callback.from_user.id)
    )
    user = result.scalars().first()
    if not user:
        user = User(telegram_id=callback.from_user.id)
        db_session.add(user)
        await db_session.flush()

    # ---------- 5. –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ added_words –¢–û–õ–¨–ö–û –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ ----------
    chosen_text = chosen.translation
    translation_obj = next(t for t in added_translation_objs if t.translation == chosen_text)

    added = AddedWord(
        word_id       = word_obj.id,
        translation_id= translation_obj.id,
        user_id       = user.id,
        collection_id = col_id,
        next_repeat   = None
    )
    db_session.add(added)
    await db_session.commit()

    await callback.message.answer(**Text("–°–ª–æ–≤–æ ", Bold(tr.word),  f" –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º ¬´{chosen_text}¬ª.").as_kwargs())
    await state.set_state(AddWordStates.waiting_for_new_word)
